import {STORAGE_TYPES, toSnakeCase} from "@cld-apis/utils";
import {Cloudinary} from "cloudinary-core";
const basicOptimizations = {
  quality: "auto",
  fetchFormat: "auto"
};
export const getTransformationOptions = (options = {}) => {
  return {
    ...basicOptimizations,
    ...options
  };
};
export class CloudinaryApi {
  constructor(config = {}) {
    this._config = {
      secure: true,
      ...config
    };
    const cld = new Cloudinary(toSnakeCase(this._config));
    this.image = {
      url: (publicId, options = {}) => cld.url(publicId, getTransformationOptions(options)),
      element: (publicId, options = {}) => cld.imageTag(publicId, getTransformationOptions(options)),
      fetchRemote: (url, options = {}) => cld.url(url, getTransformationOptions({...options, type: STORAGE_TYPES.FETCH}))
    };
    this.video = {
      url: (publicId, options = {}) => cld.video_url(publicId, getTransformationOptions(options)),
      element: (publicId, options = {}) => cld.videoTag(publicId, getTransformationOptions(options)),
      thumbnail: (publicId, options = {}) => ({url: cld.video_thumbnail_url(publicId, getTransformationOptions(options))})
    };
  }
  config(config = {}) {
    return new CloudinaryApi({
      ...this._config,
      ...config
    });
  }
  get configurations() {
    return this._config;
  }
}
export default CloudinaryApi;
