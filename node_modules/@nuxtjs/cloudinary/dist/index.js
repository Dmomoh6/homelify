'use strict';

const path = require('path');
const defu = require('defu');
const chalk = require('chalk');
const utils = require('@cld-apis/utils');
const cloudinaryCore = require('cloudinary-core');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const defu__default = /*#__PURE__*/_interopDefaultLegacy(defu);
const chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);

const consola = require("consola");
const logger = consola.withScope("nuxt:cloudinary");

const basicOptimizations = {
  quality: "auto",
  fetchFormat: "auto"
};
const getTransformationOptions = (options = {}) => {
  return {
    ...basicOptimizations,
    ...options
  };
};
class CloudinaryApi {
  constructor(config = {}) {
    this._config = {
      secure: true,
      ...config
    };
    const cld = new cloudinaryCore.Cloudinary(utils.toSnakeCase(this._config));
    this.image = {
      url: (publicId, options = {}) => cld.url(publicId, getTransformationOptions(options)),
      element: (publicId, options = {}) => cld.imageTag(publicId, getTransformationOptions(options)),
      fetchRemote: (url, options = {}) => cld.url(url, getTransformationOptions({ ...options, type: utils.STORAGE_TYPES.FETCH }))
    };
    this.video = {
      url: (publicId, options = {}) => cld.video_url(publicId, getTransformationOptions(options)),
      element: (publicId, options = {}) => cld.videoTag(publicId, getTransformationOptions(options)),
      thumbnail: (publicId, options = {}) => ({ url: cld.video_thumbnail_url(publicId, getTransformationOptions(options)) })
    };
  }
  config(config = {}) {
    return new CloudinaryApi({
      ...this._config,
      ...config
    });
  }
  get configurations() {
    return this._config;
  }
}

class ServerApi extends CloudinaryApi {
  config(config = {}) {
    return new ServerApi({
      ...this.configurations,
      ...config
    });
  }
  upload(file, options = {}, callback) {
    const $options = utils.toSnakeCase(options);
    const cldServer = require("cloudinary").v2;
    cldServer.config(utils.toSnakeCase(this.configurations));
    const uploader = cldServer.uploader;
    return uploader.upload(file, $options, callback);
  }
  async explicit(publicId, options = {}) {
    const $options = utils.toSnakeCase(options);
    const cldServer = require("cloudinary").v2;
    cldServer.config(utils.toSnakeCase(this.configurations));
    const uploader = cldServer.uploader;
    const asset = await uploader.explicit(publicId, $options);
    return asset;
  }
}

function cloudinaryModule(moduleOptions) {
  const privateCdn = this.options.cloudinary.privateCDN || moduleOptions.privateCDN || false;
  const options = defu__default['default'](this.options.cloudinary, moduleOptions, { privateCdn });
  if (!options.cloudName) {
    logger.error(`You need to provide ${chalk__default['default'].yellow("cloudName")} to set up Cloudinary. See \u{1F449} https://cloudinary.com/documentation/how_to_integrate_cloudinary for more info.`);
    return;
  }
  if (options.secure === void 0) {
    options.secure = true;
  }
  const build = this.nuxt.options.build;
  const extend = build.extend ? build.extend : () => {
  };
  build.extend = (config, ctx) => {
    if (ctx.isClient) {
      config.node = {
        fs: "empty"
      };
    }
    extend(config, ctx);
  };
  const $cloudinary = new ServerApi(options);
  const runtimeDir = path.resolve(__dirname, "runtime");
  this.nuxt.options.alias["~cloudinary"] = runtimeDir;
  this.nuxt.options.build.transpile.push(runtimeDir, "@nuxtjs/cloudinary");
  this.addPlugin({
    src: path.resolve(__dirname, "./runtime/plugin.server.js"),
    fileName: "cloudinary/plugin.server.js",
    options
  });
  this.addPlugin({
    src: path.resolve(__dirname, "./runtime/plugin.client.js"),
    fileName: "cloudinary/plugin.client.js",
    options
  });
  if (!options.apiKey || !options.apiSecret) {
    logger.warn(`${chalk__default['default'].yellow("apiKey")} and ${chalk__default['default'].yellow("apiSecret")} will be needed to set up upload to Cloudinary on build and hook. See \u{1F449} https://cloudinary.com/documentation/how_to_integrate_cloudinary for more info.`);
  }
  module.exports.$cloudinary = $cloudinary;
}
cloudinaryModule.meta = require("../package.json");

module.exports = cloudinaryModule;
