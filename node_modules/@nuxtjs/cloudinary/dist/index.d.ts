import { Module } from '@nuxt/types';
import { CloudConfig, Asset } from '@cld-apis/types';
import { ImageTag, VideoTag } from 'cloudinary-core';

declare type ImageApi = {
    url: (publicId: string, options: any) => string;
    element: (publicId: string, options: any) => ImageTag;
    fetchRemote: (publicId: string, options: any) => string;
};
declare type VideoThumbnail = {
    url: string;
};
declare type VideoApi = {
    url: (publicId: string, options: any) => string;
    element: (publicId: string, options: any) => VideoTag;
    thumbnail: (publicId: string, options: any) => VideoThumbnail;
};
declare class CloudinaryApi {
    private readonly _config;
    readonly image: ImageApi;
    readonly video: VideoApi;
    constructor(config?: CloudConfig);
    config(config?: CloudConfig): CloudinaryApi;
    get configurations(): CloudConfig;
}

declare type CldError = {
    msg: string;
};
declare class ServerApi extends CloudinaryApi {
    config(config?: CloudConfig): ServerApi;
    /**
     * Returns a Promise from the upload process for an asset on Server side
     * @param {String} file - path to the asset you wish to upload
     * @param {Options} options - upload options (optional): https://cloudinary.com/documentation/image_upload_api_reference#optional_parameters
     * @param {Function} callback - callback handler (optional)
     * @returns {Promise<Asset | CldError>}
     */
    upload(file: string, options?: Object, callback?: Function): Promise<Asset | CldError>;
    /**
     *
     * @param {String} publicId - the public id of the target asset
     * @param {{ type: {DeliveryType} }} options - options to apply on the asset : https://cloudinary.com/documentation/image_upload_api_reference#optional_parameters-6
     * @returns {Promise<Asset | CldError | null>}
     */
    explicit(publicId: string, options?: Object): Promise<Asset | CldError>;
}

declare class ClientApi extends CloudinaryApi {
    upload(file: string, options?: Object, callback?: Function): Promise<any>;
    config(config?: CloudConfig): ClientApi;
}

declare type Exclude<T, U> = T extends U ? never : T;
declare type RequireOne<T, K extends keyof T> = {
    [X in Exclude<keyof T, K>]?: T[X];
} & {
    [P in K]-?: T[P];
};
interface ModuleOptions extends RequireOne<CloudConfig, 'cloudName'> {
    useComponent?: boolean;
}
declare function cloudinaryModule(moduleOptions: any): Module<ModuleOptions>;
declare module '@nuxt/types' {
    interface NuxtConfig {
        cloudinary?: ModuleOptions;
    }
    interface Configuration {
        cloudinary?: ModuleOptions;
    }
    interface Context {
        $cloudinary: ServerApi;
    }
}
declare module 'vue/types/vue' {
    interface Vue {
        $cloudinary: ClientApi;
    }
}

export default cloudinaryModule;
export { ClientApi, CloudinaryApi, ImageApi, ModuleOptions, ServerApi, VideoApi, VideoThumbnail };
